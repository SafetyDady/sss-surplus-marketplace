# schema.prisma - Prisma schema for Next.js project

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  image         String?
  role          Role      @default(PENDING)
  provider      String    @default("email")
  providerId    String?   @map("provider_id")
  emailVerified DateTime? @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  assignedBy    String?   @map("assigned_by")
  assignedAt    DateTime? @map("assigned_at")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  assignedByUser   User?             @relation("UserAssignments", fields: [assignedBy], references: [id])
  assignedUsers    User[]            @relation("UserAssignments")
  roleAssignments  RoleAssignment[]  @relation("UserRoleAssignments")
  assignedRoles    RoleAssignment[]  @relation("AssignedByUser")
  adminActions     AdminAction[]     @relation("AdminActions")
  targetedActions  AdminAction[]     @relation("TargetedActions")
  loginLogs        LoginLog[]
  notifications    Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model RoleAssignment {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  assignedBy String   @map("assigned_by")
  fromRole   Role?    @map("from_role")
  toRole     Role     @map("to_role")
  reason     String?
  assignedAt DateTime @default(now()) @map("assigned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  user           User @relation("UserRoleAssignments", fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("AssignedByUser", fields: [assignedBy], references: [id])

  @@map("role_assignments")
}

model AdminAction {
  id                 String   @id @default(cuid())
  adminId            String   @map("admin_id")
  action             String
  targetUserId       String?  @map("target_user_id")
  targetResourceType String?  @map("target_resource_type")
  targetResourceId   String?  @map("target_resource_id")
  details            Json?
  ipAddress          String?  @map("ip_address")
  userAgent          String?  @map("user_agent")
  createdAt          DateTime @default(now()) @map("created_at")

  admin      User  @relation("AdminActions", fields: [adminId], references: [id])
  targetUser User? @relation("TargetedActions", fields: [targetUserId], references: [id])

  @@map("admin_actions")
}

model LoginLog {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  email         String?
  loginType     String   @map("login_type")
  provider      String?
  success       Boolean  @default(false)
  failureReason String?  @map("failure_reason")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  createdAt     DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("login_logs")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  data      Json?
  readAt    DateTime? @map("read_at")
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  SUPER_ADMIN @map("super_admin")
  ADMIN       @map("admin")
  VENDOR      @map("vendor")
  CUSTOMER    @map("customer")
  PENDING     @map("pending")
}

