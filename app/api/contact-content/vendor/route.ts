import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/firebase/firebase';
import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vendor Section
export async function GET() {
  try {
    const docRef = doc(db, 'vendor_content', 'vendor_section');
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      return NextResponse.json({
        success: true,
        data: docSnap.data()
      });
    } else {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      const defaultData = {
        title: "ü§ù ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô Vendor ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤?",
        subtitle: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Surplus ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        features: [
          {
            icon: "üåü",
            title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà",
            description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ê‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏•‡∏≤‡∏î"
          },
          {
            icon: "üí∞",
            title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
            description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"
          },
          {
            icon: "üöÄ",
            title: "‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
            description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"
          },
          {
            icon: "üíé",
            title: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
            description: "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
          }
        ],
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      };
      
      return NextResponse.json({
        success: true,
        data: defaultData
      });
    }
  } catch (error) {
    console.error('Error fetching vendor content:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to fetch vendor content'
    }, { status: 500 });
  }
}

// PUT - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vendor Section
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { title, subtitle, features } = body;

    // Validation
    if (!title || !subtitle || !features || !Array.isArray(features) || features.length !== 4) {
      return NextResponse.json({
        success: false,
        error: 'Title, subtitle, and 4 features are required'
      }, { status: 400 });
    }

    // Validate each feature
    for (const feature of features) {
      if (!feature.icon || !feature.title || !feature.description) {
        return NextResponse.json({
          success: false,
          error: 'Each feature must have icon, title, and description'
        }, { status: 400 });
      }
    }

    const docRef = doc(db, 'vendor_content', 'vendor_section');
    const updateData = {
      title,
      subtitle,
      features,
      updatedAt: serverTimestamp()
    };

    await setDoc(docRef, updateData, { merge: true });

    return NextResponse.json({
      success: true,
      message: 'Vendor content updated successfully',
      data: updateData
    });
  } catch (error) {
    console.error('Error updating vendor content:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to update vendor content'
    }, { status: 500 });
  }
}

