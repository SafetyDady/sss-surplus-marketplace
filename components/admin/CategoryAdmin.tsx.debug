'use client'

import { useEffect, useState } from 'react'
import { db } from '../../firebase/firebase'
import {
  collection,
  addDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  doc,
} from 'firebase/firestore'
import AdminCardContainer from '../common/AdminCardContainer'
import { Plus, Edit2, Trash2, Save, X } from 'lucide-react'

/*
File: /components/admin/CategoryAdmin.tsx
Version: 4.0 | 2025-06-07
note:
- ปรับปรุง responsive design สำหรับ 3 column tree
- เพิ่ม icons และ better UX
- ปรับปรุง layout ให้ทำงานได้ดีในทุกขนาดหน้าจอ
- เพิ่ม loading states และ error handling
*/

type Category = {
  id: string
  name: string
  parentId: string | null
}

export default function CategoryAdmin() {
  const [categories, setCategories] = useState<Category[]>([])
  const [mainName, setMainName] = useState('')
  const [subName, setSubName] = useState('')
  const [sub2Name, setSub2Name] = useState('')

  const [selectedMain, setSelectedMain] = useState<Category | null>(null)
  const [selectedSub, setSelectedSub] = useState<Category | null>(null)

  const [editingId, setEditingId] = useState<string | null>(null)
  const [editingName, setEditingName] = useState('')

  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const fetchCategories = async () => {
    setLoading(true)
    try {
      console.log("Fetching categories from collection:", db ? "db initialized" : "db not initialized");
      const snap = await getDocs(collection(db, 'categories'))
      console.log("Categories fetched:", snap.docs.length);
      
      setCategories(
        snap.docs.map(doc => ({
          id: doc.id,
          name: doc.data().name,
          parentId: doc.data().parentId || null,
        }))
      )
      setError(null)
    } catch (error) {
      console.error("Error fetching categories:", error);
      setError('เกิดข้อผิดพลาดในการโหลดข้อมูล: ' + error.message)
    }
    setLoading(false)
  }

  useEffect(() => {
    console.log("Attempting to connect to Firebase...");
    console.log("Firebase Project ID:", process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ? "Set" : "Not Set");
    
    fetchCategories()
  }, [])

  const handleAddMain = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!mainName.trim()) return
    setLoading(true)
    try {
      await addDoc(collection(db, 'categories'), { name: mainName.trim(), parentId: null })
      setMainName('')
      await fetchCategories()
      setError(null)
    } catch (error) {
      console.error("Error adding main category:", error);
      setError('เพิ่มหมวดหลักไม่สำเร็จ: ' + error.message)
    }
    setLoading(false)
  }

  // ส่วนที่เหลือของโค้ดยังคงเหมือนเดิม...
}

